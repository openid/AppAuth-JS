"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var query_string_utils_1 = require("./query_string_utils");
var MOCK_LOCATION_UNDEFINED = 'undefined';
/**
 * Useful in the context of writing tests.
 */
var MockLocationLike = /** @class */ (function () {
    function MockLocationLike() {
        this.hash = MOCK_LOCATION_UNDEFINED;
        this.host = MOCK_LOCATION_UNDEFINED;
        this.origin = MOCK_LOCATION_UNDEFINED;
        this.hostname = MOCK_LOCATION_UNDEFINED;
        this.pathname = MOCK_LOCATION_UNDEFINED;
        this.port = MOCK_LOCATION_UNDEFINED;
        this.protocol = MOCK_LOCATION_UNDEFINED;
        this.search = MOCK_LOCATION_UNDEFINED;
        this.assign = function () { };
    }
    MockLocationLike.prototype.setHash = function (hash) {
        this.hash = hash;
        return this;
    };
    MockLocationLike.prototype.setHost = function (host) {
        this.host = host;
        return this;
    };
    MockLocationLike.prototype.setOrigin = function (origin) {
        this.origin = origin;
        return this;
    };
    MockLocationLike.prototype.setHostname = function (hostname) {
        this.hostname = hostname;
        return this;
    };
    MockLocationLike.prototype.setPathname = function (pathname) {
        this.pathname = pathname;
        return this;
    };
    MockLocationLike.prototype.setPort = function (port) {
        this.port = port;
        return this;
    };
    MockLocationLike.prototype.setProtocol = function (protocol) {
        this.protocol = protocol;
        return this;
    };
    MockLocationLike.prototype.setSearch = function (search) {
        this.search = search;
        return this;
    };
    MockLocationLike.prototype.setAssign = function (assign) {
        this.assign = assign;
        return this;
    };
    return MockLocationLike;
}());
describe('Query String Parser Tests', function () {
    var locationLike = new MockLocationLike();
    var parser = new query_string_utils_1.BasicQueryStringUtils();
    it('Empty query string should not blow up.', function () {
        locationLike.setSearch('?');
        var result = parser.parse(locationLike);
        var keys = Object.keys(result);
        expect(result).toBeTruthy();
        expect(keys.length).toBe(0, 'No query parameters provided');
    });
    it('Should parse simple query strings.', function () {
        locationLike.setSearch(encodeURI('key1=value1&key2=value 2& key3= value 3'));
        var result = parser.parse(locationLike);
        var keys = Object.keys(result);
        expect(result).toBeTruthy();
        expect(keys.length).toBe(3, '3 Query parameters should be present');
        expect(keys[0]).toBe('key1');
        expect(keys[1]).toBe('key2');
        expect(keys[2]).toBe(' key3');
        expect(result[keys[0]]).toBe('value1', 'Expected value is "value1"');
        expect(result[keys[1]]).toBe('value 2', 'Expected value is "value 2"');
        expect(result[keys[2]]).toBe(' value 3', 'Expected value is " value 3"');
    });
    it('Should handle params with no values', function () {
        locationLike.setSearch(encodeURI('key1=value1&key2='));
        var result = parser.parse(locationLike);
        var keys = Object.keys(result);
        expect(result).toBeTruthy();
        expect(keys.length).toBe(1, '1 Query parameter should be present');
        expect(keys[0]).toBe('key1');
        expect(result[keys[0]]).toBe('value1', 'Expected value is "value1"');
    });
    it('Should handle duplicate parameter values', function () {
        locationLike.setSearch(encodeURI('key1=value1&key1=value2'));
        var result = parser.parse(locationLike);
        var keys = Object.keys(result);
        expect(result).toBeTruthy();
        expect(keys.length).toBe(1, '1 Query parameter should be present');
        expect(keys[0]).toBe('key1');
        expect(result[keys[0]]).toBe('value2', 'Expected value is "value2"');
    });
    it('Should be able to deal with escaped # or ? characters', function () {
        locationLike.setSearch(encodeURI('key1=value1?&key2=value2 #'));
        var result = parser.parse(locationLike);
        var keys = Object.keys(result);
        expect(result).toBeTruthy();
        expect(keys.length).toBe(2, '2 Query parameters should be present');
        expect(keys[0]).toBe('key1');
        expect(keys[1]).toBe('key2');
        expect(result[keys[0]]).toBe('value1?', 'Expected value is "value1?"');
        expect(result[keys[1]]).toBe('value2 #', 'Expected value is "value2 #"');
    });
});
//# sourceMappingURL=data:application/json;base64,