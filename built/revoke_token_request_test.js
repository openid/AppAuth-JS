"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var revoke_token_request_1 = require("./revoke_token_request");
describe('Revoke Token Request tests', function () {
    var token = 'token';
    var request = new revoke_token_request_1.RevokeTokenRequest(token);
    it('Basic Revoke Token Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.token).toBe(token);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = revoke_token_request_1.RevokeTokenRequest.fromJson(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.token).toBe(token);
    });
});
describe('Authenticated Revoke Token Request tests', function () {
    var token = 'token';
    var tokenTypeHint = 'refresh_token';
    var clientId = 'client_id';
    var clientSecret = 'client_secret';
    var request = new revoke_token_request_1.RevokeTokenRequest(token, tokenTypeHint, clientId, clientSecret);
    it('Basic Revoke Token Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.token).toBe(token);
        expect(request.tokenTypeHint).toBe(tokenTypeHint);
        expect(request.clientId).toBe(clientId);
        expect(request.clientSecret).toBe(clientSecret);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = revoke_token_request_1.RevokeTokenRequest.fromJson(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.token).toBe(token);
        expect(newRequest.tokenTypeHint).toBe(tokenTypeHint);
        expect(newRequest.clientId).toBe(clientId);
        expect(newRequest.clientSecret).toBe(clientSecret);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2b2tlX3Rva2VuX3JlcXVlc3RfdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXZva2VfdG9rZW5fcmVxdWVzdF90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7O0FBRUgsK0RBQWtGO0FBR2xGLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRTtJQUNyQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7SUFFdEIsSUFBSSxPQUFPLEdBQXVCLElBQUkseUNBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEUsRUFBRSxDQUFDLGtDQUFrQyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUU7UUFDMUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixJQUFJLFVBQVUsR0FBRyx5Q0FBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLDBDQUEwQyxFQUFFO0lBQ25ELElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN0QixJQUFNLGFBQWEsR0FBRyxlQUFlLENBQUM7SUFDdEMsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQzdCLElBQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQztJQUVyQyxJQUFJLE9BQU8sR0FDUCxJQUFJLHlDQUFrQixDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRXpFLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQzFDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxVQUFVLEdBQUcseUNBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlXG4gKiBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1Jldm9rZVRva2VuUmVxdWVzdCwgUmV2b2tlVG9rZW5SZXF1ZXN0SnNvbn0gZnJvbSAnLi9yZXZva2VfdG9rZW5fcmVxdWVzdCc7XG5pbXBvcnQge1N0cmluZ01hcH0gZnJvbSAnLi90eXBlcyc7XG5cbmRlc2NyaWJlKCdSZXZva2UgVG9rZW4gUmVxdWVzdCB0ZXN0cycsICgpID0+IHtcbiAgY29uc3QgdG9rZW4gPSAndG9rZW4nO1xuXG4gIGxldCByZXF1ZXN0OiBSZXZva2VUb2tlblJlcXVlc3QgPSBuZXcgUmV2b2tlVG9rZW5SZXF1ZXN0KHRva2VuKTtcblxuICBpdCgnQmFzaWMgUmV2b2tlIFRva2VuIFJlcXVlc3QgVGVzdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJlcXVlc3QpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChyZXF1ZXN0LnRva2VuKS50b0JlKHRva2VuKTtcbiAgfSk7XG5cbiAgaXQoJ1RvIEpzb24oKSBhbmQgZnJvbSBKc29uKCkgc2hvdWxkIHdvcmsnLCAoKSA9PiB7XG4gICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlcXVlc3QudG9Kc29uKCkpKTtcbiAgICBleHBlY3QoanNvbikubm90LnRvQmVOdWxsKCk7XG4gICAgbGV0IG5ld1JlcXVlc3QgPSBSZXZva2VUb2tlblJlcXVlc3QuZnJvbUpzb24oanNvbik7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QpLm5vdC50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0LnRva2VuKS50b0JlKHRva2VuKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0F1dGhlbnRpY2F0ZWQgUmV2b2tlIFRva2VuIFJlcXVlc3QgdGVzdHMnLCAoKSA9PiB7XG4gIGNvbnN0IHRva2VuID0gJ3Rva2VuJztcbiAgY29uc3QgdG9rZW5UeXBlSGludCA9ICdyZWZyZXNoX3Rva2VuJztcbiAgY29uc3QgY2xpZW50SWQgPSAnY2xpZW50X2lkJztcbiAgY29uc3QgY2xpZW50U2VjcmV0ID0gJ2NsaWVudF9zZWNyZXQnO1xuXG4gIGxldCByZXF1ZXN0OiBSZXZva2VUb2tlblJlcXVlc3QgPVxuICAgICAgbmV3IFJldm9rZVRva2VuUmVxdWVzdCh0b2tlbiwgdG9rZW5UeXBlSGludCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCk7XG5cbiAgaXQoJ0Jhc2ljIFJldm9rZSBUb2tlbiBSZXF1ZXN0IFRlc3RzJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVxdWVzdC50b2tlbikudG9CZSh0b2tlbik7XG4gICAgZXhwZWN0KHJlcXVlc3QudG9rZW5UeXBlSGludCkudG9CZSh0b2tlblR5cGVIaW50KTtcbiAgICBleHBlY3QocmVxdWVzdC5jbGllbnRJZCkudG9CZShjbGllbnRJZCk7XG4gICAgZXhwZWN0KHJlcXVlc3QuY2xpZW50U2VjcmV0KS50b0JlKGNsaWVudFNlY3JldCk7XG4gIH0pO1xuXG4gIGl0KCdUbyBKc29uKCkgYW5kIGZyb20gSnNvbigpIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnRvSnNvbigpKSk7XG4gICAgZXhwZWN0KGpzb24pLm5vdC50b0JlTnVsbCgpO1xuICAgIGxldCBuZXdSZXF1ZXN0ID0gUmV2b2tlVG9rZW5SZXF1ZXN0LmZyb21Kc29uKGpzb24pO1xuICAgIGV4cGVjdChuZXdSZXF1ZXN0KS5ub3QudG9CZU51bGwoKTtcbiAgICBleHBlY3QobmV3UmVxdWVzdC50b2tlbikudG9CZSh0b2tlbik7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QudG9rZW5UeXBlSGludCkudG9CZSh0b2tlblR5cGVIaW50KTtcbiAgICBleHBlY3QobmV3UmVxdWVzdC5jbGllbnRJZCkudG9CZShjbGllbnRJZCk7XG4gICAgZXhwZWN0KG5ld1JlcXVlc3QuY2xpZW50U2VjcmV0KS50b0JlKGNsaWVudFNlY3JldCk7XG4gIH0pO1xufSk7XG4iXX0=