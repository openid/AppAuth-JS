"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pkce_code_verifier_1 = require("./pkce_code_verifier");
var redirect_based_handler_1 = require("./redirect_based_handler");
var storage_1 = require("./storage");
var token_request_handler_1 = require("./token_request_handler");
var types_1 = require("./types");
var xhr_1 = require("./xhr");
var PKCETokenRequestHandler = /** @class */ (function () {
    function PKCETokenRequestHandler(authorizationHandler, configuration, storageBackend) {
        if (storageBackend === void 0) { storageBackend = new storage_1.LocalStorageBackend(); }
        this.verifier = new pkce_code_verifier_1.CodeVerifier();
        this.authorizationHandler = new redirect_based_handler_1.RedirectRequestHandler();
        this.tokenHandler = new token_request_handler_1.BaseTokenRequestHandler(new xhr_1.JQueryRequestor());
        this.configuration = configuration;
        this.storageBackend = storageBackend;
    }
    PKCETokenRequestHandler.prototype.performPKCEAuthorizationCodeRequest = function (configuration, request) {
        request.setExtrasField('code_verifier', this.verifier.verifier);
        this.authorizationHandler.performAuthorizationRequest(configuration, request);
    };
    PKCETokenRequestHandler.prototype.performPKCEAuthorizationTokenRequest = function (configuration, request) {
        var _this = this;
        this.storageBackend.getItem(types_1.AUTHORIZATION_RESPONSE_HANDLE_KEY).then(function (result) {
            var authResponse = JSON.parse(result);
            request.setExtrasField('code_challenge', _this.verifier.challenge);
            request.setExtrasField('code_challenge_method', _this.verifier.method);
            _this.tokenHandler.performTokenRequest(_this.configuration, request)
                .then(function (tokenResponseJson) {
                _this.storageBackend.removeItem(types_1.AUTHORIZATION_RESPONSE_HANDLE_KEY).then(function () {
                    _this.storageBackend.setItem(types_1.AUTHORIZATION_RESPONSE_HANDLE_KEY, JSON.stringify(tokenResponseJson));
                });
            })
                .catch(function (err) {
                console.log('error ' + err.message);
            });
        });
    };
    return PKCETokenRequestHandler;
}());
exports.PKCETokenRequestHandler = PKCETokenRequestHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtjZV90b2tlbl9yZXF1ZXN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGtjZV90b2tlbl9yZXF1ZXN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwyREFBa0Q7QUFDbEQsbUVBQWdFO0FBQ2hFLHFDQUE4RDtBQUU5RCxpRUFBcUY7QUFDckYsaUNBQTBEO0FBQzFELDZCQUFzQztBQUV0QztJQU9FLGlDQUNJLG9CQUE0QyxFQUM1QyxhQUFnRCxFQUNoRCxjQUEwRDtRQUExRCwrQkFBQSxFQUFBLHFCQUFxQyw2QkFBbUIsRUFBRTtRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksaUNBQVksRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLCtDQUFzQixFQUFFLENBQUM7UUFDekQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLCtDQUF1QixDQUFDLElBQUkscUJBQWUsRUFBRSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQUVELHFFQUFtQyxHQUFuQyxVQUNJLGFBQWdELEVBQ2hELE9BQTZCO1FBQy9CLE9BQU8sQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLDJCQUEyQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsc0VBQW9DLEdBQXBDLFVBQ0ksYUFBZ0QsRUFDaEQsT0FBcUI7UUFGekIsaUJBb0JDO1FBakJDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLHlDQUFpQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUN4RSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU8sQ0FBQyxDQUFDO1lBRXZDLE9BQU8sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsRSxPQUFPLENBQUMsY0FBYyxDQUFDLHVCQUF1QixFQUFFLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFdEUsS0FBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQztpQkFDN0QsSUFBSSxDQUFDLFVBQUEsaUJBQWlCO2dCQUNyQixLQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyx5Q0FBaUMsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDckUsS0FBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQ3ZCLHlDQUFpQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2dCQUM1RSxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBQyxHQUFHO2dCQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUMsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQTlDRCxJQThDQztBQTlDWSwwREFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F1dGhvcml6YXRpb25SZXF1ZXN0fSBmcm9tICcuL2F1dGhvcml6YXRpb25fcmVxdWVzdCc7XG5pbXBvcnQge0F1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbn0gZnJvbSAnLi9hdXRob3JpemF0aW9uX3NlcnZpY2VfY29uZmlndXJhdGlvbic7XG5pbXBvcnQge0NvZGVWZXJpZmllcn0gZnJvbSAnLi9wa2NlX2NvZGVfdmVyaWZpZXInO1xuaW1wb3J0IHtSZWRpcmVjdFJlcXVlc3RIYW5kbGVyfSBmcm9tICcuL3JlZGlyZWN0X2Jhc2VkX2hhbmRsZXInO1xuaW1wb3J0IHtMb2NhbFN0b3JhZ2VCYWNrZW5kLCBTdG9yYWdlQmFja2VuZH0gZnJvbSAnLi9zdG9yYWdlJztcbmltcG9ydCB7VG9rZW5SZXF1ZXN0fSBmcm9tICcuL3Rva2VuX3JlcXVlc3QnO1xuaW1wb3J0IHtCYXNlVG9rZW5SZXF1ZXN0SGFuZGxlciwgVG9rZW5SZXF1ZXN0SGFuZGxlcn0gZnJvbSAnLi90b2tlbl9yZXF1ZXN0X2hhbmRsZXInO1xuaW1wb3J0IHtBVVRIT1JJWkFUSU9OX1JFU1BPTlNFX0hBTkRMRV9LRVl9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtKUXVlcnlSZXF1ZXN0b3J9IGZyb20gJy4veGhyJztcblxuZXhwb3J0IGNsYXNzIFBLQ0VUb2tlblJlcXVlc3RIYW5kbGVyIHtcbiAgdmVyaWZpZXI6IENvZGVWZXJpZmllcjtcbiAgYXV0aG9yaXphdGlvbkhhbmRsZXI6IFJlZGlyZWN0UmVxdWVzdEhhbmRsZXI7XG4gIHRva2VuSGFuZGxlcjogVG9rZW5SZXF1ZXN0SGFuZGxlcjtcbiAgY29uZmlndXJhdGlvbjogQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uO1xuICBzdG9yYWdlQmFja2VuZDogU3RvcmFnZUJhY2tlbmQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBhdXRob3JpemF0aW9uSGFuZGxlcjogUmVkaXJlY3RSZXF1ZXN0SGFuZGxlcixcbiAgICAgIGNvbmZpZ3VyYXRpb246IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbixcbiAgICAgIHN0b3JhZ2VCYWNrZW5kOiBTdG9yYWdlQmFja2VuZCA9IG5ldyBMb2NhbFN0b3JhZ2VCYWNrZW5kKCkpIHtcbiAgICB0aGlzLnZlcmlmaWVyID0gbmV3IENvZGVWZXJpZmllcigpO1xuICAgIHRoaXMuYXV0aG9yaXphdGlvbkhhbmRsZXIgPSBuZXcgUmVkaXJlY3RSZXF1ZXN0SGFuZGxlcigpO1xuICAgIHRoaXMudG9rZW5IYW5kbGVyID0gbmV3IEJhc2VUb2tlblJlcXVlc3RIYW5kbGVyKG5ldyBKUXVlcnlSZXF1ZXN0b3IoKSk7XG4gICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjtcbiAgICB0aGlzLnN0b3JhZ2VCYWNrZW5kID0gc3RvcmFnZUJhY2tlbmQ7XG4gIH1cblxuICBwZXJmb3JtUEtDRUF1dGhvcml6YXRpb25Db2RlUmVxdWVzdChcbiAgICAgIGNvbmZpZ3VyYXRpb246IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbixcbiAgICAgIHJlcXVlc3Q6IEF1dGhvcml6YXRpb25SZXF1ZXN0KSB7XG4gICAgcmVxdWVzdC5zZXRFeHRyYXNGaWVsZCgnY29kZV92ZXJpZmllcicsIHRoaXMudmVyaWZpZXIudmVyaWZpZXIpO1xuICAgIHRoaXMuYXV0aG9yaXphdGlvbkhhbmRsZXIucGVyZm9ybUF1dGhvcml6YXRpb25SZXF1ZXN0KGNvbmZpZ3VyYXRpb24sIHJlcXVlc3QpO1xuICB9XG5cbiAgcGVyZm9ybVBLQ0VBdXRob3JpemF0aW9uVG9rZW5SZXF1ZXN0KFxuICAgICAgY29uZmlndXJhdGlvbjogQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uLFxuICAgICAgcmVxdWVzdDogVG9rZW5SZXF1ZXN0KSB7XG4gICAgdGhpcy5zdG9yYWdlQmFja2VuZC5nZXRJdGVtKEFVVEhPUklaQVRJT05fUkVTUE9OU0VfSEFORExFX0tFWSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgdmFyIGF1dGhSZXNwb25zZSA9IEpTT04ucGFyc2UocmVzdWx0ISk7XG5cbiAgICAgIHJlcXVlc3Quc2V0RXh0cmFzRmllbGQoJ2NvZGVfY2hhbGxlbmdlJywgdGhpcy52ZXJpZmllci5jaGFsbGVuZ2UpO1xuICAgICAgcmVxdWVzdC5zZXRFeHRyYXNGaWVsZCgnY29kZV9jaGFsbGVuZ2VfbWV0aG9kJywgdGhpcy52ZXJpZmllci5tZXRob2QpO1xuXG4gICAgICB0aGlzLnRva2VuSGFuZGxlci5wZXJmb3JtVG9rZW5SZXF1ZXN0KHRoaXMuY29uZmlndXJhdGlvbiwgcmVxdWVzdClcbiAgICAgICAgICAudGhlbih0b2tlblJlc3BvbnNlSnNvbiA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VCYWNrZW5kLnJlbW92ZUl0ZW0oQVVUSE9SSVpBVElPTl9SRVNQT05TRV9IQU5ETEVfS0VZKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlQmFja2VuZC5zZXRJdGVtKFxuICAgICAgICAgICAgICAgICAgQVVUSE9SSVpBVElPTl9SRVNQT05TRV9IQU5ETEVfS0VZLCBKU09OLnN0cmluZ2lmeSh0b2tlblJlc3BvbnNlSnNvbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0iXX0=