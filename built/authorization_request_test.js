"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_request_1 = require("./authorization_request");
describe('AuthorizationRequest Tests', function () {
    var clientId = 'client_id';
    var redirectUri = 'http://my/redirect_uri';
    var scope = 'scope';
    var state = 'state';
    var extras = { key: 'value' };
    var jsonRequest = {
        client_id: clientId,
        redirect_uri: redirectUri,
        response_type: authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE,
        scope: scope,
        state: state,
        extras: extras
    };
    var jsonRequest2 = {
        client_id: clientId,
        redirect_uri: redirectUri,
        response_type: authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE,
        scope: scope,
        state: undefined,
        extras: extras
    };
    var jsonRequest3 = {
        client_id: clientId,
        redirect_uri: redirectUri,
        response_type: authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_TOKEN,
        scope: scope,
        state: undefined,
        extras: extras
    };
    var request = new authorization_request_1.AuthorizationRequest(jsonRequest);
    var request2 = new authorization_request_1.AuthorizationRequest(jsonRequest2);
    it('Basic Authorization Request Tests', function () {
        expect(request).not.toBeNull();
        expect(request.responseType).toBe(authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE);
        expect(request.clientId).toBe(clientId);
        expect(request.redirectUri).toBe(redirectUri);
        expect(request.scope).toBe(scope);
        expect(request.state).toBe(state);
        expect(request.extras).toBeTruthy();
        expect(request.extras['key']).toBe('value');
        expect(request.extras).toEqual(extras);
    });
    it('To Json() and from Json() should work', function () {
        var json = JSON.parse(JSON.stringify(request.toJson()));
        expect(json).not.toBeNull();
        var newRequest = new authorization_request_1.AuthorizationRequest(json);
        expect(newRequest).not.toBeNull();
        expect(newRequest.responseType).toBe(authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_CODE);
        expect(newRequest.clientId).toBe(clientId);
        expect(newRequest.redirectUri).toBe(redirectUri);
        expect(newRequest.scope).toBe(scope);
        expect(newRequest.state).toBe(state);
        expect(newRequest.extras).toBeTruthy();
        expect(newRequest.extras['key']).toBe('value');
        expect(newRequest.extras).toEqual(extras);
    });
    it('Expect cryptographic newState() to populate state', function () {
        expect(request2.state).not.toBeNull();
    });
    it('Support response_type TOKEN', function () {
        var request3 = new authorization_request_1.AuthorizationRequest(jsonRequest3);
        expect(request3.responseType).toBe(authorization_request_1.AuthorizationRequest.RESPONSE_TYPE_TOKEN);
    });
});
//# sourceMappingURL=data:application/json;base64,