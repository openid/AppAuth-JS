"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_service_configuration_1 = require("./authorization_service_configuration");
var test_fetcher_1 = require("./test_fetcher");
describe('Authorization Service Configuration Tests', function () {
    var authorizationEndpoint = 'authorization://endpoint';
    var tokenEndpoint = 'token://endpoint';
    var revocationEndpoint = 'revocation://endpoint';
    it('Initialization should work', function () {
        var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint);
        expect(configuration).toBeTruthy();
        expect(configuration.authorizationEndpoint).toBe(authorizationEndpoint);
        expect(configuration.tokenEndpoint).toBe(tokenEndpoint);
        expect(configuration.revocationEndpoint).toBe(revocationEndpoint);
    });
    it('Conversion to Json and back should work', function () {
        var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint);
        var json = configuration.toJson();
        var newConfiguration = authorization_service_configuration_1.AuthorizationServiceConfiguration.fromJson(json);
        expect(newConfiguration).toBeTruthy();
        expect(newConfiguration.authorizationEndpoint).toBe(configuration.authorizationEndpoint);
        expect(newConfiguration.tokenEndpoint).toBe(configuration.tokenEndpoint);
        expect(newConfiguration.revocationEndpoint).toBe(configuration.revocationEndpoint);
    });
    describe('Tests with dependencies', function () {
        it('Fetch from issuer tests should work', function (done) {
            var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint);
            authorization_service_configuration_1.AuthorizationServiceConfiguration
                .fetchFromIssuer('some://endpoint', test_fetcher_1.testFetchWithResult(configuration.toJson()))
                .then(function (result) {
                expect(result).toBeTruthy();
                expect(result.authorizationEndpoint).toBe(configuration.authorizationEndpoint);
                expect(result.tokenEndpoint).toBe(configuration.tokenEndpoint);
                expect(result.revocationEndpoint).toBe(configuration.revocationEndpoint);
                done();
            });
        });
        it('Fetch from issuer tests should work', function (done) {
            var error = new Error('Something bad happened.');
            authorization_service_configuration_1.AuthorizationServiceConfiguration
                .fetchFromIssuer('some://endpoint', test_fetcher_1.testFetchWithError(error))
                .catch(function (result) {
                expect(result).toBeTruthy();
                var error = result;
                expect(error.message).toBe('Something bad happened.');
                done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbl9zZXJ2aWNlX2NvbmZpZ3VyYXRpb25fdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hdXRob3JpemF0aW9uX3NlcnZpY2VfY29uZmlndXJhdGlvbl90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7O0FBRUgsNkZBQStIO0FBRS9ILCtDQUF1RTtBQUV2RSxRQUFRLENBQUMsMkNBQTJDLEVBQUU7SUFFcEQsSUFBTSxxQkFBcUIsR0FBRywwQkFBMEIsQ0FBQTtJQUN4RCxJQUFNLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQztJQUN6QyxJQUFNLGtCQUFrQixHQUFHLHVCQUF1QixDQUFDO0lBRW5ELEVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUMvQixJQUFJLGFBQWEsR0FBRyxJQUFJLHVFQUFpQyxDQUNyRCxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU5RCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxJQUFJLGFBQWEsR0FBRyxJQUFJLHVFQUFpQyxDQUNyRCxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUU5RCxJQUFJLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEMsSUFBSSxnQkFBZ0IsR0FBRyx1RUFBaUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3pGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyRixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx5QkFBeUIsRUFBRTtRQUVsQyxFQUFFLENBQUMscUNBQXFDLEVBQUUsVUFBQyxJQUFZO1lBQ3JELElBQUksYUFBYSxHQUFHLElBQUksdUVBQWlDLENBQ3JELHFCQUFxQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQzlELHVFQUFpQztpQkFDNUIsZUFBZSxDQUFDLGlCQUFpQixFQUFFLGtDQUFtQixDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2lCQUMvRSxJQUFJLENBQUMsVUFBQSxNQUFNO2dCQUNWLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDL0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUMvRCxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN6RSxJQUFJLEVBQUUsQ0FBQztZQUNULENBQUMsQ0FBQyxDQUFDO1FBQ1QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsVUFBQyxJQUFZO1lBQ3JELElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDakQsdUVBQWlDO2lCQUM1QixlQUFlLENBQUMsaUJBQWlCLEVBQUUsaUNBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFBLE1BQU07Z0JBQ1gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUM1QixJQUFJLEtBQUssR0FBRyxNQUFzQixDQUFDO2dCQUNuQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLEVBQUUsQ0FBQztZQUNULENBQUMsQ0FBQyxDQUFDO1FBQ1QsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGVcbiAqIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7QXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uLCBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb25Kc29ufSBmcm9tICcuL2F1dGhvcml6YXRpb25fc2VydmljZV9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7QXBwQXV0aEVycm9yfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQge3Rlc3RGZXRjaFdpdGhFcnJvciwgdGVzdEZldGNoV2l0aFJlc3VsdH0gZnJvbSAnLi90ZXN0X2ZldGNoZXInO1xuXG5kZXNjcmliZSgnQXV0aG9yaXphdGlvbiBTZXJ2aWNlIENvbmZpZ3VyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG5cbiAgY29uc3QgYXV0aG9yaXphdGlvbkVuZHBvaW50ID0gJ2F1dGhvcml6YXRpb246Ly9lbmRwb2ludCdcbiAgY29uc3QgdG9rZW5FbmRwb2ludCA9ICd0b2tlbjovL2VuZHBvaW50JztcbiAgY29uc3QgcmV2b2NhdGlvbkVuZHBvaW50ID0gJ3Jldm9jYXRpb246Ly9lbmRwb2ludCc7XG5cbiAgaXQoJ0luaXRpYWxpemF0aW9uIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxldCBjb25maWd1cmF0aW9uID0gbmV3IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbihcbiAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50LCB0b2tlbkVuZHBvaW50LCByZXZvY2F0aW9uRW5kcG9pbnQpO1xuXG4gICAgZXhwZWN0KGNvbmZpZ3VyYXRpb24pLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoY29uZmlndXJhdGlvbi5hdXRob3JpemF0aW9uRW5kcG9pbnQpLnRvQmUoYXV0aG9yaXphdGlvbkVuZHBvaW50KTtcbiAgICBleHBlY3QoY29uZmlndXJhdGlvbi50b2tlbkVuZHBvaW50KS50b0JlKHRva2VuRW5kcG9pbnQpO1xuICAgIGV4cGVjdChjb25maWd1cmF0aW9uLnJldm9jYXRpb25FbmRwb2ludCkudG9CZShyZXZvY2F0aW9uRW5kcG9pbnQpO1xuICB9KTtcblxuICBpdCgnQ29udmVyc2lvbiB0byBKc29uIGFuZCBiYWNrIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxldCBjb25maWd1cmF0aW9uID0gbmV3IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbihcbiAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50LCB0b2tlbkVuZHBvaW50LCByZXZvY2F0aW9uRW5kcG9pbnQpO1xuXG4gICAgbGV0IGpzb24gPSBjb25maWd1cmF0aW9uLnRvSnNvbigpO1xuICAgIGxldCBuZXdDb25maWd1cmF0aW9uID0gQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uLmZyb21Kc29uKGpzb24pO1xuICAgIGV4cGVjdChuZXdDb25maWd1cmF0aW9uKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KG5ld0NvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvbkVuZHBvaW50KS50b0JlKGNvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvbkVuZHBvaW50KTtcbiAgICBleHBlY3QobmV3Q29uZmlndXJhdGlvbi50b2tlbkVuZHBvaW50KS50b0JlKGNvbmZpZ3VyYXRpb24udG9rZW5FbmRwb2ludCk7XG4gICAgZXhwZWN0KG5ld0NvbmZpZ3VyYXRpb24ucmV2b2NhdGlvbkVuZHBvaW50KS50b0JlKGNvbmZpZ3VyYXRpb24ucmV2b2NhdGlvbkVuZHBvaW50KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Rlc3RzIHdpdGggZGVwZW5kZW5jaWVzJywgKCkgPT4ge1xuXG4gICAgaXQoJ0ZldGNoIGZyb20gaXNzdWVyIHRlc3RzIHNob3VsZCB3b3JrJywgKGRvbmU6IERvbmVGbikgPT4ge1xuICAgICAgbGV0IGNvbmZpZ3VyYXRpb24gPSBuZXcgQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uKFxuICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludCwgdG9rZW5FbmRwb2ludCwgcmV2b2NhdGlvbkVuZHBvaW50KTtcbiAgICAgIEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvblxuICAgICAgICAgIC5mZXRjaEZyb21Jc3N1ZXIoJ3NvbWU6Ly9lbmRwb2ludCcsIHRlc3RGZXRjaFdpdGhSZXN1bHQoY29uZmlndXJhdGlvbi50b0pzb24oKSkpXG4gICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuYXV0aG9yaXphdGlvbkVuZHBvaW50KS50b0JlKGNvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvbkVuZHBvaW50KTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQudG9rZW5FbmRwb2ludCkudG9CZShjb25maWd1cmF0aW9uLnRva2VuRW5kcG9pbnQpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5yZXZvY2F0aW9uRW5kcG9pbnQpLnRvQmUoY29uZmlndXJhdGlvbi5yZXZvY2F0aW9uRW5kcG9pbnQpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ0ZldGNoIGZyb20gaXNzdWVyIHRlc3RzIHNob3VsZCB3b3JrJywgKGRvbmU6IERvbmVGbikgPT4ge1xuICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKCdTb21ldGhpbmcgYmFkIGhhcHBlbmVkLicpO1xuICAgICAgQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uXG4gICAgICAgICAgLmZldGNoRnJvbUlzc3Vlcignc29tZTovL2VuZHBvaW50JywgdGVzdEZldGNoV2l0aEVycm9yKGVycm9yKSlcbiAgICAgICAgICAuY2F0Y2gocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgICAgIGxldCBlcnJvciA9IHJlc3VsdCBhcyBBcHBBdXRoRXJyb3I7XG4gICAgICAgICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnU29tZXRoaW5nIGJhZCBoYXBwZW5lZC4nKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9KTtcbiAgICB9KTtcblxuICB9KTtcblxufSk7XG4iXX0=