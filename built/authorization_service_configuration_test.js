"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_service_configuration_1 = require("./authorization_service_configuration");
var xhr_1 = require("./xhr");
describe('Authorization Service Configuration Tests', function () {
    var authorizationEndpoint = 'authorization://endpoint';
    var tokenEndpoint = 'token://endpoint';
    var revocationEndpoint = 'revocation://endpoint';
    var endSessionEndpoint = 'endSession://endpoint';
    var userInfoEndpoint = 'userInfo://endpoint';
    it('Initialization should work', function () {
        var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint, endSessionEndpoint, userInfoEndpoint);
        expect(configuration).toBeTruthy();
        expect(configuration.authorizationEndpoint).toBe(authorizationEndpoint);
        expect(configuration.tokenEndpoint).toBe(tokenEndpoint);
        expect(configuration.revocationEndpoint).toBe(revocationEndpoint);
        expect(configuration.endSessionEndpoint).toBe(endSessionEndpoint);
        expect(configuration.userInfoEndpoint).toBe(userInfoEndpoint);
    });
    it('Conversion to Json and back should work', function () {
        var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint, endSessionEndpoint, userInfoEndpoint);
        var json = configuration.toJson();
        var newConfiguration = authorization_service_configuration_1.AuthorizationServiceConfiguration.fromJson(json);
        expect(newConfiguration).toBeTruthy();
        expect(newConfiguration.authorizationEndpoint).toBe(configuration.authorizationEndpoint);
        expect(newConfiguration.tokenEndpoint).toBe(configuration.tokenEndpoint);
        expect(newConfiguration.revocationEndpoint).toBe(configuration.revocationEndpoint);
        expect(configuration.endSessionEndpoint).toBe(endSessionEndpoint);
        expect(configuration.userInfoEndpoint).toBe(userInfoEndpoint);
    });
    describe('Tests with dependencies', function () {
        it('Fetch from issuer tests should work', function (done) {
            var configuration = new authorization_service_configuration_1.AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint, endSessionEndpoint, userInfoEndpoint);
            var promise = Promise.resolve(configuration.toJson());
            var requestor = new xhr_1.TestRequestor(promise);
            authorization_service_configuration_1.AuthorizationServiceConfiguration.fetchFromIssuer('some://endpoint', requestor)
                .then(function (result) {
                expect(result).toBeTruthy();
                expect(result.authorizationEndpoint).toBe(configuration.authorizationEndpoint);
                expect(result.tokenEndpoint).toBe(configuration.tokenEndpoint);
                expect(result.revocationEndpoint).toBe(configuration.revocationEndpoint);
                expect(configuration.endSessionEndpoint).toBe(endSessionEndpoint);
                expect(configuration.userInfoEndpoint).toBe(userInfoEndpoint);
                done();
            });
        });
        it('Fetch from issuer tests should work', function (done) {
            var promise = Promise.reject(new Error('Something bad happened.'));
            var requestor = new xhr_1.TestRequestor(promise);
            authorization_service_configuration_1.AuthorizationServiceConfiguration.fetchFromIssuer('some://endpoint', requestor)
                .catch(function (result) {
                expect(result).toBeTruthy();
                var error = result;
                expect(error.message).toBe('Something bad happened.');
                done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,