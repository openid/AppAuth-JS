"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_response_1 = require("./authorization_response");
describe('Authorization Response Tests', function () {
    var code = 'code';
    var state = 'state';
    it('Constructing an Authorization Response should work', function () {
        var response = new authorization_response_1.AuthorizationResponse(code, state);
        expect(response).not.toBeNull();
        expect(response.code).toBe(code);
        expect(response.state).toBe(state);
    });
    it('toJson() and fromJson() should work', function () {
        var response = new authorization_response_1.AuthorizationResponse(code, state);
        var json = response.toJson();
        expect(json).not.toBeNull();
        expect(json.code).toBe(code);
        expect(json.state).toBe(state);
        var newResponse = authorization_response_1.AuthorizationResponse.fromJson(json);
        expect(newResponse).not.toBeNull();
        expect(newResponse.code).toBe(code);
        expect(newResponse.state).toBe(state);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbl9yZXNwb25zZV90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2F1dGhvcml6YXRpb25fcmVzcG9uc2VfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOztBQUVILG1FQUErRDtBQUUvRCxRQUFRLENBQUMsOEJBQThCLEVBQUU7SUFDdkMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3BCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUV0QixFQUFFLENBQUMsb0RBQW9ELEVBQUU7UUFDdkQsSUFBSSxRQUFRLEdBQUcsSUFBSSw4Q0FBcUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRTtRQUN4QyxJQUFJLFFBQVEsR0FBRyxJQUFJLDhDQUFxQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLFdBQVcsR0FBRyw4Q0FBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcclxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlXHJcbiAqIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXHJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQge0F1dGhvcml6YXRpb25SZXNwb25zZX0gZnJvbSAnLi9hdXRob3JpemF0aW9uX3Jlc3BvbnNlJztcclxuXHJcbmRlc2NyaWJlKCdBdXRob3JpemF0aW9uIFJlc3BvbnNlIFRlc3RzJywgKCkgPT4ge1xyXG4gIGNvbnN0IGNvZGUgPSAnY29kZSc7XHJcbiAgY29uc3Qgc3RhdGUgPSAnc3RhdGUnO1xyXG5cclxuICBpdCgnQ29uc3RydWN0aW5nIGFuIEF1dGhvcml6YXRpb24gUmVzcG9uc2Ugc2hvdWxkIHdvcmsnLCAoKSA9PiB7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBuZXcgQXV0aG9yaXphdGlvblJlc3BvbnNlKGNvZGUsIHN0YXRlKTtcclxuICAgIGV4cGVjdChyZXNwb25zZSkubm90LnRvQmVOdWxsKCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuY29kZSkudG9CZShjb2RlKTtcclxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0ZSkudG9CZShzdGF0ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCd0b0pzb24oKSBhbmQgZnJvbUpzb24oKSBzaG91bGQgd29yaycsICgpID0+IHtcclxuICAgIGxldCByZXNwb25zZSA9IG5ldyBBdXRob3JpemF0aW9uUmVzcG9uc2UoY29kZSwgc3RhdGUpO1xyXG4gICAgbGV0IGpzb24gPSByZXNwb25zZS50b0pzb24oKTtcclxuICAgIGV4cGVjdChqc29uKS5ub3QudG9CZU51bGwoKTtcclxuICAgIGV4cGVjdChqc29uLmNvZGUpLnRvQmUoY29kZSk7XHJcbiAgICBleHBlY3QoanNvbi5zdGF0ZSkudG9CZShzdGF0ZSk7XHJcbiAgICBsZXQgbmV3UmVzcG9uc2UgPSBBdXRob3JpemF0aW9uUmVzcG9uc2UuZnJvbUpzb24oanNvbik7XHJcbiAgICBleHBlY3QobmV3UmVzcG9uc2UpLm5vdC50b0JlTnVsbCgpO1xyXG4gICAgZXhwZWN0KG5ld1Jlc3BvbnNlLmNvZGUpLnRvQmUoY29kZSk7XHJcbiAgICBleHBlY3QobmV3UmVzcG9uc2Uuc3RhdGUpLnRvQmUoc3RhdGUpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19