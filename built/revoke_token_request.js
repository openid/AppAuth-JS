"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents a revoke token request.
 * For more information look at:
 * https://tools.ietf.org/html/rfc7009#section-2.1
 */
var RevokeTokenRequest = /** @class */ (function () {
    function RevokeTokenRequest(token, tokenTypeHint, clientId, clientSecret) {
        this.token = token;
        this.tokenTypeHint = tokenTypeHint;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
    /**
     * Serializes a TokenRequest to a JavaScript object.
     */
    RevokeTokenRequest.prototype.toJson = function () {
        var json = { token: this.token };
        if (this.tokenTypeHint) {
            json['token_type_hint'] = this.tokenTypeHint;
        }
        if (this.clientId) {
            json['client_id'] = this.clientId;
        }
        if (this.clientSecret) {
            json['client_secret'] = this.clientSecret;
        }
        return json;
    };
    RevokeTokenRequest.prototype.toStringMap = function () {
        var map = { token: this.token };
        if (this.tokenTypeHint) {
            map['token_type_hint'] = this.tokenTypeHint;
        }
        if (this.clientId) {
            map['client_id'] = this.clientId;
        }
        if (this.clientSecret) {
            map['client_secret'] = this.clientSecret;
        }
        return map;
    };
    RevokeTokenRequest.fromJson = function (input) {
        return new RevokeTokenRequest(input.token, input.token_type_hint, input.client_id, input.client_secret);
    };
    return RevokeTokenRequest;
}());
exports.RevokeTokenRequest = RevokeTokenRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2b2tlX3Rva2VuX3JlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmV2b2tlX3Rva2VuX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUE4QkE7Ozs7R0FJRztBQUNIO0lBQ0UsNEJBQ1csS0FBYSxFQUNiLGFBQTZCLEVBQzdCLFFBQWlCLEVBQ2pCLFlBQXFCO1FBSHJCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixrQkFBYSxHQUFiLGFBQWEsQ0FBZ0I7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixpQkFBWSxHQUFaLFlBQVksQ0FBUztJQUFHLENBQUM7SUFFcEM7O09BRUc7SUFDSCxtQ0FBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLEdBQTJCLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQztRQUV2RCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUM5QztRQUVELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNuQztRQUVELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMzQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUdELHdDQUFXLEdBQVg7UUFDRSxJQUFJLEdBQUcsR0FBYyxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUM7UUFFekMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDN0M7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDbEM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUM7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFHTSwyQkFBUSxHQUFmLFVBQWdCLEtBQTZCO1FBQzNDLE9BQU8sSUFBSSxrQkFBa0IsQ0FDekIsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUFwREQsSUFvREM7QUFwRFksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcclxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlXHJcbiAqIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXHJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCB7U3RyaW5nTWFwfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBTdXBwb3J0ZWQgdG9rZW4gdHlwZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIFRva2VuVHlwZUhpbnQgPSAncmVmcmVzaF90b2tlbid8J2FjY2Vzc190b2tlbic7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgVG9rZW4gUmVxdWVzdCBhcyBKU09OLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXZva2VUb2tlblJlcXVlc3RKc29uIHtcclxuICB0b2tlbjogc3RyaW5nO1xyXG4gIHRva2VuX3R5cGVfaGludD86IFRva2VuVHlwZUhpbnQ7XHJcbiAgY2xpZW50X2lkPzogc3RyaW5nO1xyXG4gIGNsaWVudF9zZWNyZXQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgcmV2b2tlIHRva2VuIHJlcXVlc3QuXHJcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGxvb2sgYXQ6XHJcbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MDA5I3NlY3Rpb24tMi4xXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmV2b2tlVG9rZW5SZXF1ZXN0IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgcHVibGljIHRva2VuOiBzdHJpbmcsXHJcbiAgICAgIHB1YmxpYyB0b2tlblR5cGVIaW50PzogVG9rZW5UeXBlSGludCxcclxuICAgICAgcHVibGljIGNsaWVudElkPzogc3RyaW5nLFxyXG4gICAgICBwdWJsaWMgY2xpZW50U2VjcmV0Pzogc3RyaW5nKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemVzIGEgVG9rZW5SZXF1ZXN0IHRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXHJcbiAgICovXHJcbiAgdG9Kc29uKCk6IFJldm9rZVRva2VuUmVxdWVzdEpzb24ge1xyXG4gICAgbGV0IGpzb246IFJldm9rZVRva2VuUmVxdWVzdEpzb24gPSB7dG9rZW46IHRoaXMudG9rZW59O1xyXG5cclxuICAgIGlmICh0aGlzLnRva2VuVHlwZUhpbnQpIHtcclxuICAgICAganNvblsndG9rZW5fdHlwZV9oaW50J10gPSB0aGlzLnRva2VuVHlwZUhpbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY2xpZW50SWQpIHtcclxuICAgICAganNvblsnY2xpZW50X2lkJ10gPSB0aGlzLmNsaWVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNsaWVudFNlY3JldCkge1xyXG4gICAgICBqc29uWydjbGllbnRfc2VjcmV0J10gPSB0aGlzLmNsaWVudFNlY3JldDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ganNvbjtcclxuICB9XHJcblxyXG5cclxuICB0b1N0cmluZ01hcCgpOiBTdHJpbmdNYXAge1xyXG4gICAgbGV0IG1hcDogU3RyaW5nTWFwID0ge3Rva2VuOiB0aGlzLnRva2VufTtcclxuXHJcbiAgICBpZiAodGhpcy50b2tlblR5cGVIaW50KSB7XHJcbiAgICAgIG1hcFsndG9rZW5fdHlwZV9oaW50J10gPSB0aGlzLnRva2VuVHlwZUhpbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY2xpZW50SWQpIHtcclxuICAgICAgbWFwWydjbGllbnRfaWQnXSA9IHRoaXMuY2xpZW50SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY2xpZW50U2VjcmV0KSB7XHJcbiAgICAgIG1hcFsnY2xpZW50X3NlY3JldCddID0gdGhpcy5jbGllbnRTZWNyZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1hcDtcclxuICB9XHJcblxyXG5cclxuICBzdGF0aWMgZnJvbUpzb24oaW5wdXQ6IFJldm9rZVRva2VuUmVxdWVzdEpzb24pOiBSZXZva2VUb2tlblJlcXVlc3Qge1xyXG4gICAgcmV0dXJuIG5ldyBSZXZva2VUb2tlblJlcXVlc3QoXHJcbiAgICAgICAgaW5wdXQudG9rZW4sIGlucHV0LnRva2VuX3R5cGVfaGludCwgaW5wdXQuY2xpZW50X2lkLCBpbnB1dC5jbGllbnRfc2VjcmV0KTtcclxuICB9XHJcbn1cclxuIl19