"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
var default_fetcher_1 = require("./default_fetcher");
/**
 * The standard base path for well-known resources on domains.
 * See https://tools.ietf.org/html/rfc5785 for more information.
 */
var WELL_KNOWN_PATH = '.well-known';
/**
 * The standard resource under the well known path at which an OpenID Connect
 * discovery document can be found under an issuer's base URI.
 */
var OPENID_CONFIGURATION = 'openid-configuration';
/**
 * Configuration details required to interact with an authorization service.
 */
var AuthorizationServiceConfiguration = /** @class */ (function () {
    function AuthorizationServiceConfiguration(authorizationEndpoint, tokenEndpoint, revocationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
        this.tokenEndpoint = tokenEndpoint;
        this.revocationEndpoint = revocationEndpoint;
    }
    AuthorizationServiceConfiguration.prototype.toJson = function () {
        return {
            authorization_endpoint: this.authorizationEndpoint,
            token_endpoint: this.tokenEndpoint,
            revocation_endpoint: this.revocationEndpoint
        };
    };
    AuthorizationServiceConfiguration.fromJson = function (json) {
        return new AuthorizationServiceConfiguration(json.authorization_endpoint, json.token_endpoint, json.revocation_endpoint);
    };
    AuthorizationServiceConfiguration.fetchFromIssuer = function (openIdIssuerUrl, fetcher) {
        var fullUrl = openIdIssuerUrl + "/" + WELL_KNOWN_PATH + "/" + OPENID_CONFIGURATION;
        var fetcherToUse = fetcher || default_fetcher_1.default;
        return fetcherToUse.fetch(fullUrl, { mode: 'cors' })
            .then(function (response) { return response.json(); })
            .then(function (json) { return AuthorizationServiceConfiguration.fromJson(json); });
    };
    return AuthorizationServiceConfiguration;
}());
exports.AuthorizationServiceConfiguration = AuthorizationServiceConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbl9zZXJ2aWNlX2NvbmZpZ3VyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXV0aG9yaXphdGlvbl9zZXJ2aWNlX2NvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxxREFBK0M7QUFXL0M7OztHQUdHO0FBQ0gsSUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDO0FBRXRDOzs7R0FHRztBQUNILElBQU0sb0JBQW9CLEdBQUcsc0JBQXNCLENBQUM7QUFFcEQ7O0dBRUc7QUFDSDtJQUNFLDJDQUNXLHFCQUE2QixFQUM3QixhQUFxQixFQUNyQixrQkFBMEI7UUFGMUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFRO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBQ3JCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtJQUFHLENBQUM7SUFFekMsa0RBQU0sR0FBTjtRQUNFLE1BQU0sQ0FBQztZQUNMLHNCQUFzQixFQUFFLElBQUksQ0FBQyxxQkFBcUI7WUFDbEQsY0FBYyxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2xDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7U0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFTSwwQ0FBUSxHQUFmLFVBQWdCLElBQTJDO1FBQ3pELE1BQU0sQ0FBQyxJQUFJLGlDQUFpQyxDQUN4QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRU0saURBQWUsR0FBdEIsVUFBdUIsZUFBdUIsRUFBRSxPQUFxQjtRQUVuRSxJQUFNLE9BQU8sR0FBTSxlQUFlLFNBQUksZUFBZSxTQUFJLG9CQUFzQixDQUFDO1FBRWhGLElBQU0sWUFBWSxHQUFHLE9BQU8sSUFBSSx5QkFBYyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUMsQ0FBQzthQUM3QyxJQUFJLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ2pDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLGlDQUFpQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBaEQsQ0FBZ0QsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFDSCx3Q0FBQztBQUFELENBQUMsQUE1QkQsSUE0QkM7QUE1QlksOEVBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGVcbiAqIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgZGVmYXVsdEZldGNoZXIgZnJvbSAnLi9kZWZhdWx0X2ZldGNoZXInO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uIGFzIGEgSlNPTiBvYmplY3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uSnNvbiB7XG4gIGF1dGhvcml6YXRpb25fZW5kcG9pbnQ6IHN0cmluZztcbiAgdG9rZW5fZW5kcG9pbnQ6IHN0cmluZztcbiAgcmV2b2NhdGlvbl9lbmRwb2ludDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBzdGFuZGFyZCBiYXNlIHBhdGggZm9yIHdlbGwta25vd24gcmVzb3VyY2VzIG9uIGRvbWFpbnMuXG4gKiBTZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU3ODUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbmNvbnN0IFdFTExfS05PV05fUEFUSCA9ICcud2VsbC1rbm93bic7XG5cbi8qKlxuICogVGhlIHN0YW5kYXJkIHJlc291cmNlIHVuZGVyIHRoZSB3ZWxsIGtub3duIHBhdGggYXQgd2hpY2ggYW4gT3BlbklEIENvbm5lY3RcbiAqIGRpc2NvdmVyeSBkb2N1bWVudCBjYW4gYmUgZm91bmQgdW5kZXIgYW4gaXNzdWVyJ3MgYmFzZSBVUkkuXG4gKi9cbmNvbnN0IE9QRU5JRF9DT05GSUdVUkFUSU9OID0gJ29wZW5pZC1jb25maWd1cmF0aW9uJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGRldGFpbHMgcmVxdWlyZWQgdG8gaW50ZXJhY3Qgd2l0aCBhbiBhdXRob3JpemF0aW9uIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyBhdXRob3JpemF0aW9uRW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgIHB1YmxpYyB0b2tlbkVuZHBvaW50OiBzdHJpbmcsXG4gICAgICBwdWJsaWMgcmV2b2NhdGlvbkVuZHBvaW50OiBzdHJpbmcpIHt9XG5cbiAgdG9Kc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdXRob3JpemF0aW9uX2VuZHBvaW50OiB0aGlzLmF1dGhvcml6YXRpb25FbmRwb2ludCxcbiAgICAgIHRva2VuX2VuZHBvaW50OiB0aGlzLnRva2VuRW5kcG9pbnQsXG4gICAgICByZXZvY2F0aW9uX2VuZHBvaW50OiB0aGlzLnJldm9jYXRpb25FbmRwb2ludFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvbjogQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uSnNvbik6IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb24oXG4gICAgICAgIGpzb24uYXV0aG9yaXphdGlvbl9lbmRwb2ludCwganNvbi50b2tlbl9lbmRwb2ludCwganNvbi5yZXZvY2F0aW9uX2VuZHBvaW50KTtcbiAgfVxuXG4gIHN0YXRpYyBmZXRjaEZyb21Jc3N1ZXIob3BlbklkSXNzdWVyVXJsOiBzdHJpbmcsIGZldGNoZXI/OiBHbG9iYWxGZXRjaCk6XG4gICAgICBQcm9taXNlPEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IGZ1bGxVcmwgPSBgJHtvcGVuSWRJc3N1ZXJVcmx9LyR7V0VMTF9LTk9XTl9QQVRIfS8ke09QRU5JRF9DT05GSUdVUkFUSU9OfWA7XG5cbiAgICBjb25zdCBmZXRjaGVyVG9Vc2UgPSBmZXRjaGVyIHx8IGRlZmF1bHRGZXRjaGVyO1xuICAgIHJldHVybiBmZXRjaGVyVG9Vc2UuZmV0Y2goZnVsbFVybCwge21vZGU6ICdjb3JzJ30pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oanNvbiA9PiBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb24uZnJvbUpzb24oanNvbikpO1xuICB9XG59XG4iXX0=