"use strict";
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var xhr_1 = require("./xhr");
/**
 * The standard base path for well-known resources on domains.
 * See https://tools.ietf.org/html/rfc5785 for more information.
 */
var WELL_KNOWN_PATH = '.well-known';
/**
 * The standard resource under the well known path at which an OpenID Connect
 * discovery document can be found under an issuer's base URI.
 */
var OPENID_CONFIGURATION = 'openid-configuration';
/**
 * Configuration details required to interact with an authorization service.
 *
 * More information at https://openid.net/specs/openid-connect-discovery-1_0-17.html
 */
var AuthorizationServiceConfiguration = /** @class */ (function () {
    function AuthorizationServiceConfiguration(oauthFlowType, authorizationEndpoint, tokenEndpoint, revocationEndpoint, // for Revoking Access Tokens
    endSessionEndpoint, // for OpenID session management
    userInfoEndpoint) {
        if (oauthFlowType === void 0) { oauthFlowType = types_1.FLOW_TYPE_IMPLICIT; }
        this.oauthFlowType = oauthFlowType;
        this.authorizationEndpoint = authorizationEndpoint;
        this.tokenEndpoint = tokenEndpoint;
        this.revocationEndpoint = revocationEndpoint;
        this.endSessionEndpoint = endSessionEndpoint;
        this.userInfoEndpoint = userInfoEndpoint;
    }
    AuthorizationServiceConfiguration.prototype.toJson = function () {
        return {
            oauth_flow_type: this.oauthFlowType,
            authorization_endpoint: this.authorizationEndpoint,
            token_endpoint: this.tokenEndpoint,
            revocation_endpoint: this.revocationEndpoint,
            end_session_endpoint: this.endSessionEndpoint,
            userinfo_endpoint: this.userInfoEndpoint
        };
    };
    AuthorizationServiceConfiguration.fromJson = function (json) {
        return new AuthorizationServiceConfiguration(json.oauth_flow_type, json.authorization_endpoint, json.token_endpoint, json.revocation_endpoint, json.end_session_endpoint, json.userinfo_endpoint);
    };
    AuthorizationServiceConfiguration.fetchFromIssuer = function (openIdIssuerUrl, requestor) {
        var fullUrl = openIdIssuerUrl + "/" + WELL_KNOWN_PATH + "/" + OPENID_CONFIGURATION;
        var requestorToUse = requestor || new xhr_1.JQueryRequestor();
        return requestorToUse
            .xhr({ url: fullUrl, dataType: 'json' })
            .then(function (json) { return AuthorizationServiceConfiguration.fromJson(json); });
    };
    return AuthorizationServiceConfiguration;
}());
exports.AuthorizationServiceConfiguration = AuthorizationServiceConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbl9zZXJ2aWNlX2NvbmZpZ3VyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXV0aG9yaXphdGlvbl9zZXJ2aWNlX2NvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7QUFFSCxpQ0FBMkM7QUFDM0MsNkJBQWlEO0FBZWpEOzs7R0FHRztBQUNILElBQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQztBQUV0Qzs7O0dBR0c7QUFDSCxJQUFNLG9CQUFvQixHQUFHLHNCQUFzQixDQUFDO0FBRXBEOzs7O0dBSUc7QUFDSDtJQUNFLDJDQUNXLGFBQTBDLEVBQzFDLHFCQUE2QixFQUM3QixhQUFxQixFQUNyQixrQkFBMEIsRUFBSSw2QkFBNkI7SUFDM0Qsa0JBQTJCLEVBQUcsZ0NBQWdDO0lBQzlELGdCQUF5QjtRQUx6Qiw4QkFBQSxFQUFBLGdCQUF3QiwwQkFBa0I7UUFBMUMsa0JBQWEsR0FBYixhQUFhLENBQTZCO1FBQzFDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBUTtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFDMUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFTO1FBQzNCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUztJQUFHLENBQUM7SUFFeEMsa0RBQU0sR0FBTjtRQUNFLE9BQU87WUFDTCxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDbkMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtZQUNsRCxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDbEMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtZQUM1QyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzdDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDekMsQ0FBQztJQUNKLENBQUM7SUFFTSwwQ0FBUSxHQUFmLFVBQWdCLElBQTJDO1FBQ3pELE9BQU8sSUFBSSxpQ0FBaUMsQ0FDeEMsSUFBSSxDQUFDLGVBQWUsRUFDcEIsSUFBSSxDQUFDLHNCQUFzQixFQUMzQixJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLGlEQUFlLEdBQXRCLFVBQXVCLGVBQXVCLEVBQUUsU0FBcUI7UUFFbkUsSUFBTSxPQUFPLEdBQU0sZUFBZSxTQUFJLGVBQWUsU0FBSSxvQkFBc0IsQ0FBQztRQUVoRixJQUFNLGNBQWMsR0FBRyxTQUFTLElBQUksSUFBSSxxQkFBZSxFQUFFLENBQUM7UUFFMUQsT0FBTyxjQUFjO2FBQ2hCLEdBQUcsQ0FBd0MsRUFBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUMsQ0FBQzthQUM1RSxJQUFJLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxpQ0FBaUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQWhELENBQWdELENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQ0gsd0NBQUM7QUFBRCxDQUFDLEFBeENELElBd0NDO0FBeENZLDhFQUFpQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlXG4gKiBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0ZMT1dfVFlQRV9JTVBMSUNJVH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge0pRdWVyeVJlcXVlc3RvciwgUmVxdWVzdG9yfSBmcm9tICcuL3hocic7XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbiBhcyBhIEpTT04gb2JqZWN0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbkpzb24ge1xuICBvYXV0aF9mbG93X3R5cGU6IHN0cmluZztcbiAgYXV0aG9yaXphdGlvbl9lbmRwb2ludDogc3RyaW5nO1xuICB0b2tlbl9lbmRwb2ludDogc3RyaW5nO1xuICByZXZvY2F0aW9uX2VuZHBvaW50OiBzdHJpbmc7XG4gIGVuZF9zZXNzaW9uX2VuZHBvaW50Pzogc3RyaW5nO1xuICB1c2VyaW5mb19lbmRwb2ludD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgc3RhbmRhcmQgYmFzZSBwYXRoIGZvciB3ZWxsLWtub3duIHJlc291cmNlcyBvbiBkb21haW5zLlxuICogU2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1Nzg1IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5jb25zdCBXRUxMX0tOT1dOX1BBVEggPSAnLndlbGwta25vd24nO1xuXG4vKipcbiAqIFRoZSBzdGFuZGFyZCByZXNvdXJjZSB1bmRlciB0aGUgd2VsbCBrbm93biBwYXRoIGF0IHdoaWNoIGFuIE9wZW5JRCBDb25uZWN0XG4gKiBkaXNjb3ZlcnkgZG9jdW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGFuIGlzc3VlcidzIGJhc2UgVVJJLlxuICovXG5jb25zdCBPUEVOSURfQ09ORklHVVJBVElPTiA9ICdvcGVuaWQtY29uZmlndXJhdGlvbic7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBkZXRhaWxzIHJlcXVpcmVkIHRvIGludGVyYWN0IHdpdGggYW4gYXV0aG9yaXphdGlvbiBzZXJ2aWNlLlxuICpcbiAqIE1vcmUgaW5mb3JtYXRpb24gYXQgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWRpc2NvdmVyeS0xXzAtMTcuaHRtbFxuICovXG5leHBvcnQgY2xhc3MgQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwdWJsaWMgb2F1dGhGbG93VHlwZTogc3RyaW5nID0gRkxPV19UWVBFX0lNUExJQ0lULFxuICAgICAgcHVibGljIGF1dGhvcml6YXRpb25FbmRwb2ludDogc3RyaW5nLFxuICAgICAgcHVibGljIHRva2VuRW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgIHB1YmxpYyByZXZvY2F0aW9uRW5kcG9pbnQ6IHN0cmluZywgICAvLyBmb3IgUmV2b2tpbmcgQWNjZXNzIFRva2Vuc1xuICAgICAgcHVibGljIGVuZFNlc3Npb25FbmRwb2ludD86IHN0cmluZywgIC8vIGZvciBPcGVuSUQgc2Vzc2lvbiBtYW5hZ2VtZW50XG4gICAgICBwdWJsaWMgdXNlckluZm9FbmRwb2ludD86IHN0cmluZykge31cblxuICB0b0pzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9hdXRoX2Zsb3dfdHlwZTogdGhpcy5vYXV0aEZsb3dUeXBlLFxuICAgICAgYXV0aG9yaXphdGlvbl9lbmRwb2ludDogdGhpcy5hdXRob3JpemF0aW9uRW5kcG9pbnQsXG4gICAgICB0b2tlbl9lbmRwb2ludDogdGhpcy50b2tlbkVuZHBvaW50LFxuICAgICAgcmV2b2NhdGlvbl9lbmRwb2ludDogdGhpcy5yZXZvY2F0aW9uRW5kcG9pbnQsXG4gICAgICBlbmRfc2Vzc2lvbl9lbmRwb2ludDogdGhpcy5lbmRTZXNzaW9uRW5kcG9pbnQsXG4gICAgICB1c2VyaW5mb19lbmRwb2ludDogdGhpcy51c2VySW5mb0VuZHBvaW50XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uOiBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb25Kc29uKTogQXV0aG9yaXphdGlvblNlcnZpY2VDb25maWd1cmF0aW9uIHtcbiAgICByZXR1cm4gbmV3IEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbihcbiAgICAgICAganNvbi5vYXV0aF9mbG93X3R5cGUsXG4gICAgICAgIGpzb24uYXV0aG9yaXphdGlvbl9lbmRwb2ludCxcbiAgICAgICAganNvbi50b2tlbl9lbmRwb2ludCxcbiAgICAgICAganNvbi5yZXZvY2F0aW9uX2VuZHBvaW50LFxuICAgICAgICBqc29uLmVuZF9zZXNzaW9uX2VuZHBvaW50LFxuICAgICAgICBqc29uLnVzZXJpbmZvX2VuZHBvaW50KTtcbiAgfVxuXG4gIHN0YXRpYyBmZXRjaEZyb21Jc3N1ZXIob3BlbklkSXNzdWVyVXJsOiBzdHJpbmcsIHJlcXVlc3Rvcj86IFJlcXVlc3Rvcik6XG4gICAgICBQcm9taXNlPEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IGZ1bGxVcmwgPSBgJHtvcGVuSWRJc3N1ZXJVcmx9LyR7V0VMTF9LTk9XTl9QQVRIfS8ke09QRU5JRF9DT05GSUdVUkFUSU9OfWA7XG5cbiAgICBjb25zdCByZXF1ZXN0b3JUb1VzZSA9IHJlcXVlc3RvciB8fCBuZXcgSlF1ZXJ5UmVxdWVzdG9yKCk7XG5cbiAgICByZXR1cm4gcmVxdWVzdG9yVG9Vc2VcbiAgICAgICAgLnhocjxBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb25Kc29uPih7dXJsOiBmdWxsVXJsLCBkYXRhVHlwZTogJ2pzb24nfSlcbiAgICAgICAgLnRoZW4oanNvbiA9PiBBdXRob3JpemF0aW9uU2VydmljZUNvbmZpZ3VyYXRpb24uZnJvbUpzb24oanNvbikpO1xuICB9XG59XG4iXX0=